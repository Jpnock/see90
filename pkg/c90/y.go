// Code generated by goyacc -o pkg/c90/y.go -v pkg/c90/y.output pkg/c90/grammar.y. DO NOT EDIT.

//line pkg/c90/grammar.y:2
package c90

import __yyfmt__ "fmt"

//line pkg/c90/grammar.y:2

import (
	"fmt"
	"os"
)

var AST ASTTranslationUnit

func init() {
	yyDebug = 1
	yyErrorVerbose = true
}

func Parse(yylex yyLexer) int {
	return yyParse(yylex)
}

//line pkg/c90/grammar.y:21
type yySymType struct {
	yys                int
	n                  Node
	str                string
	typ                *ASTType
	assignmentOperator ASTAssignmentOperator
	unaryOperator      ASTExprPrefixUnaryType
}

const IDENTIFIER = 57346
const CONSTANT = 57347
const STRING_LITERAL = 57348
const SIZEOF = 57349
const PTR_OP = 57350
const INC_OP = 57351
const DEC_OP = 57352
const LEFT_OP = 57353
const RIGHT_OP = 57354
const LE_OP = 57355
const GE_OP = 57356
const EQ_OP = 57357
const NE_OP = 57358
const AND_OP = 57359
const OR_OP = 57360
const MUL_ASSIGN = 57361
const DIV_ASSIGN = 57362
const MOD_ASSIGN = 57363
const ADD_ASSIGN = 57364
const SUB_ASSIGN = 57365
const LEFT_ASSIGN = 57366
const RIGHT_ASSIGN = 57367
const AND_ASSIGN = 57368
const XOR_ASSIGN = 57369
const OR_ASSIGN = 57370
const TYPE_NAME = 57371
const TYPEDEF = 57372
const EXTERN = 57373
const STATIC = 57374
const AUTO = 57375
const REGISTER = 57376
const CHAR = 57377
const SHORT = 57378
const INT = 57379
const LONG = 57380
const SIGNED = 57381
const UNSIGNED = 57382
const FLOAT = 57383
const DOUBLE = 57384
const CONST = 57385
const VOLATILE = 57386
const VOID = 57387
const STRUCT = 57388
const UNION = 57389
const ENUM = 57390
const ELLIPSIS = 57391
const CASE = 57392
const DEFAULT = 57393
const IF = 57394
const ELSE = 57395
const SWITCH = 57396
const WHILE = 57397
const DO = 57398
const FOR = 57399
const GOTO = 57400
const CONTINUE = 57401
const BREAK = 57402
const RETURN = 57403

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"CONSTANT",
	"STRING_LITERAL",
	"SIZEOF",
	"PTR_OP",
	"INC_OP",
	"DEC_OP",
	"LEFT_OP",
	"RIGHT_OP",
	"LE_OP",
	"GE_OP",
	"EQ_OP",
	"NE_OP",
	"AND_OP",
	"OR_OP",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"MOD_ASSIGN",
	"ADD_ASSIGN",
	"SUB_ASSIGN",
	"LEFT_ASSIGN",
	"RIGHT_ASSIGN",
	"AND_ASSIGN",
	"XOR_ASSIGN",
	"OR_ASSIGN",
	"TYPE_NAME",
	"TYPEDEF",
	"EXTERN",
	"STATIC",
	"AUTO",
	"REGISTER",
	"CHAR",
	"SHORT",
	"INT",
	"LONG",
	"SIGNED",
	"UNSIGNED",
	"FLOAT",
	"DOUBLE",
	"CONST",
	"VOLATILE",
	"VOID",
	"STRUCT",
	"UNION",
	"ENUM",
	"ELLIPSIS",
	"CASE",
	"DEFAULT",
	"IF",
	"ELSE",
	"SWITCH",
	"WHILE",
	"DO",
	"FOR",
	"GOTO",
	"CONTINUE",
	"BREAK",
	"RETURN",
	"'('",
	"')'",
	"'['",
	"']'",
	"'.'",
	"','",
	"'&'",
	"'*'",
	"'+'",
	"'-'",
	"'~'",
	"'!'",
	"'/'",
	"'%'",
	"'<'",
	"'>'",
	"'^'",
	"'|'",
	"'?'",
	"':'",
	"'='",
	"';'",
	"'{'",
	"'}'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1280

var yyAct = [...]int{
	72, 95, 94, 296, 145, 6, 233, 93, 121, 75,
	149, 41, 47, 5, 5, 226, 133, 123, 116, 11,
	48, 49, 50, 115, 201, 140, 10, 144, 139, 308,
	51, 294, 32, 301, 83, 120, 160, 147, 239, 57,
	138, 239, 347, 254, 119, 117, 169, 307, 168, 300,
	8, 118, 255, 122, 126, 125, 306, 128, 55, 238,
	160, 61, 58, 63, 114, 240, 134, 110, 64, 122,
	160, 154, 150, 302, 199, 246, 161, 184, 159, 62,
	102, 135, 126, 125, 315, 157, 209, 210, 165, 203,
	33, 213, 214, 204, 316, 341, 160, 31, 158, 215,
	192, 194, 126, 196, 216, 217, 70, 28, 222, 195,
	142, 39, 32, 18, 19, 20, 21, 24, 25, 22,
	23, 29, 30, 17, 36, 37, 35, 171, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 32, 185,
	223, 60, 59, 313, 272, 340, 228, 234, 200, 207,
	208, 31, 327, 218, 326, 29, 30, 154, 245, 150,
	247, 225, 243, 299, 142, 231, 224, 229, 248, 345,
	227, 252, 228, 160, 325, 241, 253, 31, 156, 141,
	256, 31, 319, 343, 317, 269, 126, 160, 318, 142,
	142, 173, 219, 142, 142, 262, 33, 249, 250, 251,
	126, 126, 293, 31, 292, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	258, 259, 265, 274, 285, 286, 287, 273, 200, 271,
	126, 125, 200, 57, 270, 134, 9, 126, 125, 290,
	134, 291, 126, 125, 304, 51, 298, 309, 142, 283,
	284, 275, 276, 303, 225, 231, 281, 282, 305, 277,
	278, 279, 280, 314, 267, 257, 266, 32, 56, 42,
	32, 126, 312, 189, 190, 191, 160, 311, 320, 310,
	142, 160, 268, 160, 220, 134, 160, 291, 221, 137,
	272, 136, 228, 202, 126, 125, 143, 324, 53, 271,
	52, 45, 4, 4, 126, 125, 134, 234, 328, 166,
	322, 332, 333, 334, 32, 164, 150, 126, 338, 331,
	329, 163, 236, 237, 162, 33, 339, 187, 227, 186,
	228, 188, 31, 148, 342, 205, 206, 344, 198, 211,
	212, 146, 288, 346, 235, 67, 348, 264, 335, 337,
	143, 263, 167, 2, 3, 38, 79, 111, 112, 101,
	78, 98, 99, 77, 76, 73, 242, 67, 131, 54,
	129, 232, 33, 67, 34, 143, 143, 202, 27, 143,
	143, 28, 12, 13, 14, 15, 16, 18, 19, 20,
	21, 24, 25, 22, 23, 29, 30, 17, 36, 37,
	35, 26, 80, 81, 84, 7, 85, 86, 87, 88,
	89, 90, 91, 92, 113, 40, 172, 96, 100, 261,
	104, 105, 106, 107, 108, 109, 97, 103, 1, 0,
	0, 0, 0, 0, 143, 82, 46, 155, 0, 0,
	0, 0, 79, 111, 112, 101, 28, 98, 99, 0,
	0, 0, 18, 19, 20, 21, 24, 25, 22, 23,
	29, 30, 17, 36, 37, 35, 143, 28, 12, 13,
	14, 15, 16, 18, 19, 20, 21, 24, 25, 22,
	23, 29, 30, 17, 36, 37, 35, 0, 80, 81,
	84, 0, 85, 86, 87, 88, 89, 90, 91, 92,
	113, 0, 230, 0, 0, 43, 104, 105, 106, 107,
	108, 109, 79, 111, 112, 101, 0, 98, 99, 0,
	0, 82, 46, 69, 0, 0, 0, 28, 12, 13,
	14, 15, 16, 18, 19, 20, 21, 24, 25, 22,
	23, 29, 30, 17, 36, 37, 35, 65, 79, 111,
	112, 101, 71, 98, 99, 0, 0, 0, 80, 81,
	84, 0, 85, 86, 87, 88, 89, 90, 91, 92,
	113, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	108, 109, 46, 0, 79, 111, 112, 101, 0, 98,
	99, 82, 46, 244, 80, 81, 84, 0, 85, 86,
	87, 88, 89, 90, 91, 92, 113, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 108, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 46, 153,
	80, 81, 84, 0, 85, 86, 87, 88, 89, 90,
	91, 92, 113, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 108, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 46, 28, 12, 13, 14, 15,
	16, 18, 19, 20, 21, 24, 25, 22, 23, 29,
	30, 17, 36, 37, 35, 0, 0, 0, 0, 0,
	127, 111, 112, 101, 0, 98, 99, 0, 0, 0,
	0, 0, 127, 111, 112, 101, 0, 98, 99, 0,
	0, 0, 0, 0, 0, 28, 0, 0, 64, 0,
	46, 18, 19, 20, 21, 24, 25, 22, 23, 29,
	30, 17, 36, 37, 35, 127, 111, 112, 101, 0,
	98, 99, 74, 0, 0, 0, 0, 0, 113, 44,
	0, 0, 0, 0, 104, 105, 106, 107, 108, 109,
	113, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	108, 109, 127, 111, 112, 101, 0, 98, 99, 0,
	0, 0, 151, 330, 66, 0, 68, 0, 0, 127,
	111, 112, 101, 113, 98, 99, 0, 0, 0, 104,
	105, 106, 107, 108, 109, 0, 0, 0, 152, 0,
	28, 0, 0, 0, 0, 151, 18, 19, 20, 21,
	24, 25, 22, 23, 29, 30, 17, 36, 37, 35,
	113, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	108, 109, 0, 0, 32, 0, 0, 113, 0, 0,
	0, 82, 0, 104, 105, 106, 107, 108, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 28,
	12, 13, 14, 15, 16, 18, 19, 20, 21, 24,
	25, 22, 23, 29, 30, 17, 36, 37, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 295, 228, 0, 0, 0, 0, 31,
	28, 12, 13, 14, 15, 16, 18, 19, 20, 21,
	24, 25, 22, 23, 29, 30, 17, 36, 37, 35,
	32, 0, 127, 111, 112, 101, 0, 98, 99, 0,
	0, 0, 0, 272, 295, 228, 127, 111, 112, 101,
	31, 98, 99, 0, 0, 28, 12, 13, 14, 15,
	16, 18, 19, 20, 21, 24, 25, 22, 23, 29,
	30, 17, 36, 37, 35, 127, 111, 112, 101, 0,
	98, 99, 0, 0, 0, 0, 0, 0, 33, 0,
	113, 336, 0, 0, 0, 31, 104, 105, 106, 107,
	108, 109, 0, 0, 113, 0, 0, 321, 0, 0,
	104, 105, 106, 107, 108, 109, 127, 111, 112, 101,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 127,
	111, 112, 101, 113, 98, 99, 297, 0, 0, 104,
	105, 106, 107, 108, 109, 127, 111, 112, 101, 0,
	98, 99, 0, 0, 0, 0, 0, 127, 111, 112,
	101, 0, 98, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 260, 0, 0, 0, 0,
	104, 105, 106, 107, 108, 109, 0, 113, 0, 0,
	124, 0, 0, 104, 105, 106, 107, 108, 109, 127,
	111, 112, 101, 113, 98, 99, 0, 0, 0, 104,
	105, 106, 107, 108, 109, 197, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 108, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 108, 109, 28,
	12, 13, 14, 15, 16, 18, 19, 20, 21, 24,
	25, 22, 23, 29, 30, 17, 36, 37, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 28, 12, 13, 14, 15, 16,
	18, 19, 20, 21, 24, 25, 22, 23, 29, 30,
	17, 36, 37, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 28,
	12, 13, 14, 15, 16, 18, 19, 20, 21, 24,
	25, 22, 23, 29, 30, 17, 36, 37, 35, 289,
	28, 12, 13, 14, 15, 16, 18, 19, 20, 21,
	24, 25, 22, 23, 29, 30, 17, 36, 37, 35,
}

var yyPact = [...]int{
	926, 926, -1000, -1000, -1000, 28, 498, 1231, 1231, 1231,
	310, 236, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 112, -1000, 134, 58, 57, -1000, -1000, -1000, -1000,
	-4, 636, -1000, 498, -1000, -1000, 438, 28, -1000, -1000,
	-1000, 236, 1025, 1140, 112, -1000, -1000, 226, -44, 781,
	337, -47, -1000, 134, 731, 498, -1000, -1000, -1000, -1000,
	544, 352, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4,
	1041, -3, -1000, -7, 262, 259, 253, 580, 247, 348,
	-35, -37, 785, -1000, -1000, 109, 59, 265, 1095, 1095,
	1041, 1053, 321, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-5, -1000, -1000, 686, 11, 25, 320, 73, 328, 21,
	30, -1000, -14, 88, -1000, -1000, -1000, -1000, 129, 221,
	-1000, 41, -1000, -1000, 108, -1000, -1000, -1000, 781, 417,
	-1000, 263, 781, 781, -26, -1000, -17, 337, -1000, -1000,
	-1000, 731, -1000, -1000, -1000, -1000, 508, 580, -6, 580,
	1041, -1000, 1041, 1041, 1041, 116, 768, -40, -1000, -1000,
	-1000, -31, 1041, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1041, 1041, 1041, 1012, 347, 343,
	-1000, -1000, -1000, 1041, -1000, -1000, -1000, 686, 1041, 1041,
	219, 122, 82, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
	1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, -1000, -1000,
	-1000, 338, 1210, -1000, -1000, 266, 140, 840, 971, 78,
	-1000, -1000, -34, -1000, -8, 1041, -1000, -1000, -1000, 337,
	1041, -29, -38, -1000, -1000, -1000, 580, -1000, -1000, 216,
	214, 209, 81, 768, -1000, -1000, -1000, 321, 3, 29,
	-1000, 121, -1000, -1000, -1000, 119, -5, 11, -1000, 1041,
	-1000, 228, 881, 25, 320, 73, 73, 328, 328, 328,
	328, 21, 21, 30, 30, -1000, -1000, -1000, -1000, -1000,
	-1000, 140, 942, 1175, 111, -1000, 91, -1000, 87, -1000,
	-1000, 263, 1041, -1000, -1000, -1000, -1000, -1000, 698, -1000,
	580, 580, 580, 1041, 928, 1041, -1000, -1000, 1041, -1000,
	-1000, -1000, 80, -1000, 32, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 281, -1000, -1000, 120, 580, 106, -1000, -1000,
	-1000, -1000, 580, -41, -1000, 580, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 428, 427, 34, 426, 419, 7, 1, 418, 8,
	24, 35, 44, 51, 45, 18, 23, 64, 67, 80,
	417, 2, 416, 17, 301, 12, 415, 405, 50, 236,
	269, 5, 10, 401, 378, 374, 28, 25, 179, 371,
	6, 27, 4, 26, 19, 3, 370, 369, 368, 16,
	31, 15, 366, 0, 365, 742, 9, 364, 363, 360,
	106, 505, 353, 354,
}

var yyR1 = [...]int{
	0, 2, 2, 2, 2, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 7, 7, 7, 7, 7,
	7, 8, 8, 8, 8, 8, 8, 9, 9, 11,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14,
	14, 14, 14, 14, 15, 15, 15, 16, 16, 17,
	17, 18, 18, 19, 19, 20, 20, 21, 21, 6,
	6, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 3, 3, 23, 24, 24, 25, 25, 25,
	25, 25, 25, 26, 26, 30, 30, 27, 27, 27,
	27, 27, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 33, 33, 33, 35, 35, 36,
	36, 37, 38, 38, 38, 38, 39, 39, 40, 40,
	40, 34, 34, 34, 41, 41, 42, 42, 29, 29,
	31, 31, 44, 44, 44, 44, 44, 44, 44, 43,
	43, 43, 43, 47, 47, 45, 45, 48, 48, 49,
	49, 49, 46, 46, 10, 10, 50, 50, 50, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 32, 32,
	32, 52, 52, 53, 53, 53, 53, 53, 53, 54,
	54, 54, 55, 55, 55, 55, 61, 61, 60, 60,
	56, 56, 57, 57, 57, 58, 58, 58, 58, 59,
	59, 59, 59, 59, 1, 1, 62, 62, 63, 63,
	63, 63,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 3, 1, 4, 3, 4, 3,
	3, 2, 2, 1, 3, 1, 2, 2, 2, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 4, 1,
	3, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 1, 3, 1, 5, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 3, 1, 2, 1,
	2, 1, 2, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 5, 4, 2, 1, 1, 1,
	2, 3, 2, 1, 2, 1, 1, 3, 1, 2,
	3, 4, 5, 2, 1, 3, 1, 3, 1, 1,
	2, 1, 1, 3, 4, 3, 4, 4, 3, 1,
	2, 2, 3, 1, 2, 1, 3, 1, 3, 2,
	2, 1, 1, 3, 1, 2, 1, 1, 2, 3,
	2, 3, 3, 4, 2, 3, 3, 4, 1, 3,
	4, 1, 3, 1, 1, 1, 1, 1, 1, 3,
	4, 3, 2, 3, 3, 4, 1, 2, 1, 2,
	1, 2, 5, 7, 5, 5, 7, 6, 7, 3,
	2, 2, 2, 3, 1, 2, 1, 1, 4, 3,
	3, 2,
}

var yyChk = [...]int{
	-1000, -1, -62, -63, -24, -25, -31, -27, -28, -29,
	-43, -44, 30, 31, 32, 33, 34, 45, 35, 36,
	37, 38, 41, 42, 39, 40, -33, -34, 29, 43,
	44, 69, 4, 62, -35, 48, 46, 47, -62, 83,
	-26, -31, -30, -61, -55, -24, 84, -25, -25, -25,
	-25, -44, 64, 62, -47, -43, -29, -31, 4, 84,
	84, 4, 83, 67, 82, -61, -55, -24, -55, 85,
	-60, -61, -53, -54, -55, -56, -57, -58, -59, 4,
	50, 51, 83, -3, 52, 54, 55, 56, 57, 58,
	59, 60, 61, -6, -21, -7, -20, -4, 9, 10,
	-8, 7, -19, -2, 68, 69, 70, 71, 72, 73,
	-18, 5, 6, 62, -17, -16, -15, -14, -13, -12,
	-11, -9, -31, -23, 65, -21, -7, 4, -45, -46,
	63, -48, 4, -49, -25, -43, -29, 63, 84, -36,
	-37, -38, -28, -29, -41, -42, 4, 84, -30, -32,
	-6, 84, -55, 85, -53, 85, -60, 81, -23, 81,
	67, 83, 62, 62, 62, -53, 62, 4, 83, 83,
	83, -3, -22, 82, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 18, 80, 64, 62, 66, 8,
	9, 10, -7, 62, -7, -9, -7, 62, 17, 79,
	-3, -10, -38, 78, 68, 15, 16, 76, 77, 13,
	14, 11, 12, 70, 71, 69, 74, 75, 65, 63,
	63, 67, 67, -31, -50, -43, -51, 62, 64, -36,
	85, -37, -39, -40, -31, 81, -38, -38, 85, 67,
	82, -41, -52, -32, 85, -53, 81, -53, -6, -3,
	-3, -3, 55, -56, 83, 83, -6, -19, -3, -3,
	63, -5, -6, 4, 4, -10, -18, -17, 63, 63,
	-50, -43, 62, -16, -15, -14, -14, -13, -13, -13,
	-13, -12, -12, -11, -11, -9, -9, -9, 4, 49,
	-49, -51, 64, 62, -50, 63, -45, 65, -23, 85,
	83, 67, 81, -23, -42, -23, 85, 85, 67, -53,
	63, 63, 63, 62, -56, 81, 65, 63, 67, 63,
	-9, 65, -23, 63, -45, 63, 63, 65, -40, -23,
	85, -32, -53, -53, -53, -3, 63, -3, -21, -6,
	65, 63, 53, 63, -53, 63, -53, 83, -53,
}

var yyDef = [...]int{
	0, -2, 204, 206, 207, 0, 0, 77, 79, 81,
	0, 131, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 128,
	129, 139, 132, 0, 0, 0, 107, 108, 205, 75,
	0, 85, 83, 0, 211, 186, 0, 0, 78, 80,
	82, 130, 0, 0, 140, 141, 143, 0, 106, 0,
	0, 123, 76, 0, 0, 0, 209, 187, 210, 182,
	0, 0, 188, 173, 174, 175, 176, 177, 178, 1,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 59, 27, 57, 15, 0, 0,
	0, 0, 55, 5, 21, 22, 23, 24, 25, 26,
	53, 2, 3, 0, 51, 49, 47, 44, 39, 36,
	33, 29, 85, 0, 135, 74, 27, 1, 0, 0,
	138, 145, 152, 147, 151, 142, 144, 133, 0, 0,
	109, 0, 113, 115, 0, 124, 126, 0, 84, 86,
	168, 0, 208, 183, 189, 184, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 200, 201,
	202, 0, 0, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 0, 0, 0, 0, 0, 0,
	11, 12, 16, 0, 17, 18, 19, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 136,
	137, 0, 0, 149, 150, 156, 157, 0, 0, 0,
	105, 110, 0, 116, 118, 0, 112, 114, 121, 0,
	0, 0, 0, 171, 185, 179, 0, 181, 73, 0,
	0, 0, 0, 0, 199, 203, 60, 56, 0, 0,
	7, 0, 13, 9, 10, 0, 54, 52, 4, 0,
	155, 156, 0, 50, 48, 45, 46, 40, 41, 42,
	43, 37, 38, 34, 35, 30, 31, 32, 153, 146,
	148, 158, 0, 0, 0, 164, 0, 160, 0, 104,
	111, 0, 0, 119, 125, 127, 122, 169, 0, 180,
	0, 0, 0, 0, 0, 0, 6, 8, 0, 20,
	28, 162, 0, 166, 0, 159, 165, 161, 117, 120,
	170, 172, 192, 194, 195, 0, 0, 0, 58, 14,
	163, 167, 0, 0, 197, 0, 193, 196, 198,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 75, 68, 3,
	62, 63, 69, 70, 67, 71, 66, 74, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 81, 83,
	76, 82, 77, 80, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 64, 3, 65, 78, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 79, 85, 72,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:45
		{
			yyVAL.n = &ASTIdentifier{ident: yyDollar[1].str}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:46
		{
			yyVAL.n = &ASTConstant{value: yyDollar[1].str}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:47
		{
			yyVAL.n = &ASTStringLiteral{value: yyDollar[1].str}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:48
		{
			yyVAL.n = &ASTBrackets{yyDollar[2].n}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:52
		{
			yyVAL.n = yyDollar[1].n
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:54
		{
			yyVAL.n = &ASTFunctionCall{function: yyDollar[1].n}
		}
	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/c90/grammar.y:55
		{
			yyVAL.n = &ASTFunctionCall{
				function:  yyDollar[1].n,
				arguments: yyDollar[3].n.(ASTArgumentExpressionList),
			}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:62
		{
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:63
		{
			yyVAL.n = &ASTExprSuffixUnary{typ: ASTExprSuffixUnaryTypeIncrement, lvalue: yyDollar[1].n}
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:66
		{
			yyVAL.n = &ASTExprSuffixUnary{typ: ASTExprSuffixUnaryTypeDecrement, lvalue: yyDollar[1].n}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:72
		{
			yyVAL.n = ASTArgumentExpressionList{yyDollar[1].n.(*ASTAssignment)}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:73
		{
			li := yyDollar[1].n.(ASTArgumentExpressionList)
			li = append(li, yyDollar[3].n.(*ASTAssignment))
			yyVAL.n = li
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:81
		{
			yyVAL.n = yyDollar[1].n
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:82
		{
			yyVAL.n = &ASTExprPrefixUnary{typ: ASTExprPrefixUnaryTypeIncrement, lvalue: yyDollar[2].n}
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:85
		{
			yyVAL.n = &ASTExprPrefixUnary{typ: ASTExprPrefixUnaryTypeDecrement, lvalue: yyDollar[2].n}
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:88
		{
			yyVAL.n = &ASTExprPrefixUnary{typ: yyDollar[1].unaryOperator, lvalue: yyDollar[2].n}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:96
		{
			yyVAL.unaryOperator = ASTExprPrefixUnaryTypeAddressOf
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:97
		{
			yyVAL.unaryOperator = ASTExprPrefixUnaryTypeDereference
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:98
		{
			yyVAL.unaryOperator = ASTExprPrefixUnaryTypePositive
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:99
		{
			yyVAL.unaryOperator = ASTExprPrefixUnaryTypeNegative
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:100
		{
			yyVAL.unaryOperator = ASTExprPrefixUnaryTypeNot
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:101
		{
			yyVAL.unaryOperator = ASTExprPrefixUnaryTypeInvert
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:105
		{
			yyVAL.n = yyDollar[1].n
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:110
		{
			yyVAL.n = yyDollar[1].n
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:111
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeMul}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:112
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeDiv}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:113
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeMod}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:117
		{
			yyVAL.n = yyDollar[1].n
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:118
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeAdd}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:119
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeSub}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:123
		{
			yyVAL.n = yyDollar[1].n
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:124
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeLeftShift}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:125
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeRightShift}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:129
		{
			yyVAL.n = yyDollar[1].n
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:130
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeLessThan}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:131
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeGreaterThan}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:132
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeLessOrEqual}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:133
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeGreaterOrEqual}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:137
		{
			yyVAL.n = yyDollar[1].n
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:138
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeEquality}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:139
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeNotEquality}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:143
		{
			yyVAL.n = yyDollar[1].n
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:144
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeBitwiseAnd}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:148
		{
			yyVAL.n = yyDollar[1].n
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:149
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeXor}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:153
		{
			yyVAL.n = yyDollar[1].n
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:154
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeBitwiseOr}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:158
		{
			yyVAL.n = yyDollar[1].n
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:159
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeLogicalAnd}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:163
		{
			yyVAL.n = yyDollar[1].n
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:164
		{
			yyVAL.n = &ASTExprBinary{lhs: yyDollar[1].n, rhs: yyDollar[3].n, typ: ASTExprBinaryTypeLogicalOr}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:168
		{
			yyVAL.n = yyDollar[1].n
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line pkg/c90/grammar.y:169
		{
			yyVAL.n = &ASTIfStatement{
				condition: yyDollar[1].n,
				body:      yyDollar[3].n,
				elseBody:  yyDollar[5].n,
				ternary:   true,
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:180
		{
			yyVAL.n = &ASTAssignment{value: yyDollar[1].n, tmpAssign: true}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:183
		{
			yyVAL.n = &ASTAssignment{lval: yyDollar[1].n, operator: yyDollar[2].assignmentOperator, value: yyDollar[3].n}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:189
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorEquals
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:190
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorMulEquals
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:191
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorDivEquals
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:192
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorModEquals
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:193
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorAddEquals
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:194
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorSubEquals
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:195
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorLeftEquals
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:196
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorRightEquals
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:197
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorAndEquals
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:198
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorXorEquals
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:199
		{
			yyVAL.assignmentOperator = ASTAssignmentOperatorOrEquals
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:203
		{
			yyVAL.n = ASTExpression{yyDollar[1].n.(*ASTAssignment)}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:206
		{
			li := yyDollar[1].n.(ASTExpression)
			li = append(li, yyDollar[3].n.(*ASTAssignment))
			yyVAL.n = li
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:214
		{
			yyVAL.n = yyDollar[1].n
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:218
		{
			fmt.Fprintf(os.Stderr, "Ignoring declaration specifier without init declaration list\n")
			yyVAL.n = ASTDeclaratorList{}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:222
		{
			for _, entry := range yyDollar[2].n.(ASTDeclaratorList) {
				entry.typ = yyDollar[1].typ
			}
			yyVAL.n = yyDollar[2].n
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:233
		{
			yyVAL.n = yyDollar[1].typ
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:240
		{
			yyVAL.n = ASTDeclaratorList{yyDollar[1].n.(*ASTDecl)}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:241
		{
			li := yyDollar[1].n.(ASTDeclaratorList)
			li = append(li, yyDollar[3].n.(*ASTDecl))
			yyVAL.n = li
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:249
		{
			yyVAL.n = &ASTDecl{decl: yyDollar[1].n.(*ASTDirectDeclarator)}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:250
		{
			yyVAL.n = &ASTDecl{decl: yyDollar[1].n.(*ASTDirectDeclarator), initVal: yyDollar[3].n}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:262
		{
			yyVAL.typ = &ASTType{typ: "void"}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:263
		{
			yyVAL.typ = &ASTType{typ: "char"}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:264
		{
			// https://stackoverflow.com/a/697531
			yyVAL.typ = &ASTType{typ: "short"}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:268
		{
			yyVAL.typ = &ASTType{typ: "int"}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:269
		{
			yyVAL.typ = &ASTType{typ: "long"}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:270
		{
			yyVAL.typ = &ASTType{typ: "float"}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:271
		{
			yyVAL.typ = &ASTType{typ: "double"}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:272
		{
			yyVAL.typ = &ASTType{typ: "signed"}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:273
		{
			yyVAL.typ = &ASTType{typ: "unsigned"}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:276
		{
			yyVAL.typ = &ASTType{typ: yyDollar[1].str}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:339
		{
			yyDollar[2].n.(*ASTDirectDeclarator).isPointer = true
			yyVAL.n = yyDollar[2].n
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:343
		{
			yyVAL.n = yyDollar[1].n
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:347
		{
			yyVAL.n = &ASTDirectDeclarator{
				identifier: &ASTIdentifier{
					ident: yyDollar[1].str,
				},
			}
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/c90/grammar.y:357
		{
			// Function declaration with arguments
			yyVAL.n = &ASTDirectDeclarator{
				decl:       yyDollar[1].n.(*ASTDirectDeclarator),
				parameters: yyDollar[3].n.(*ASTParameterList),
			}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/c90/grammar.y:364
		{
			// Function declaration for old K&R style funcs
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:367
		{
			// Function declaration with no arguments
			yyVAL.n = &ASTDirectDeclarator{
				decl:       yyDollar[1].n.(*ASTDirectDeclarator),
				parameters: &ASTParameterList{},
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:389
		{
			yyVAL.n = yyDollar[1].n
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:392
		{
			paramList := yyDollar[1].n.(*ASTParameterList)
			paramList.elipsis = true
			yyVAL.n = paramList
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:400
		{
			yyVAL.n = &ASTParameterList{
				li: []*ASTParameterDeclaration{
					yyDollar[1].n.(*ASTParameterDeclaration),
				},
			}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:407
		{
			li := yyDollar[1].n.(*ASTParameterList)
			li.li = append(li.li, yyDollar[3].n.(*ASTParameterDeclaration))
			yyVAL.n = li
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:415
		{
			yyVAL.n = &ASTParameterDeclaration{
				specifier:  yyDollar[1].n,
				declarator: yyDollar[2].n,
			}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:422
		{
			yyVAL.n = &ASTParameterDeclaration{
				specifier: yyDollar[1].n,
			}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:459
		{
			yyVAL.n = yyDollar[1].n
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:472
		{
			yyVAL.n = yyDollar[1].n
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:473
		{
			yyVAL.n = yyDollar[1].n
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:474
		{
			yyVAL.n = yyDollar[1].n
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:475
		{
			yyVAL.n = yyDollar[1].n
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:476
		{
			yyVAL.n = yyDollar[1].n
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:477
		{
			yyVAL.n = yyDollar[1].n
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:481
		{
			yyVAL.n = &ASTLabeledStatement{
				ident: &ASTIdentifier{ident: yyDollar[1].str},
				stmt:  yyDollar[3].n,
			}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/c90/grammar.y:487
		{
			yyVAL.n = &ASTSwitchCase{
				caseVal:     yyDollar[2].n,
				body:        yyDollar[4].n,
				defaultCase: false,
			}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:494
		{
			yyVAL.n = &ASTSwitchCase{
				caseVal:     nil,
				body:        yyDollar[3].n,
				defaultCase: true,
			}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:506
		{
			yyVAL.n = yyDollar[2].n
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:507
		{
			yyVAL.n = yyDollar[2].n
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/c90/grammar.y:508
		{
			yyVAL.n = &ASTDeclarationStatementLists{decls: yyDollar[2].n.(ASTDeclaratorList), stmts: yyDollar[3].n.(ASTStatementList)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:512
		{
			yyVAL.n = yyDollar[1].n
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:513
		{
			li := yyDollar[1].n.(ASTDeclaratorList)
			li = append(li, yyDollar[2].n.(ASTDeclaratorList)...)
			yyVAL.n = li
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:521
		{
			yyVAL.n = ASTStatementList{yyDollar[1].n}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:522
		{
			li := yyDollar[1].n.(ASTStatementList)
			li = append(li, yyDollar[2].n)
			yyVAL.n = li
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:531
		{
			yyVAL.n = yyDollar[1].n
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line pkg/c90/grammar.y:535
		{
			yyVAL.n = &ASTIfStatement{
				condition: yyDollar[3].n,
				body:      yyDollar[5].n,
				elseBody:  nil,
			}
		}
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
//line pkg/c90/grammar.y:542
		{
			yyVAL.n = &ASTIfStatement{
				condition: yyDollar[3].n,
				body:      yyDollar[5].n,
				elseBody:  yyDollar[7].n,
			}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line pkg/c90/grammar.y:549
		{
			yyVAL.n = &ASTSwitchStatement{
				switchOn: yyDollar[3].n,
				body:     yyDollar[5].n,
			}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line pkg/c90/grammar.y:558
		{
			yyVAL.n = &ASTWhileLoop{
				condition: yyDollar[3].n,
				body:      yyDollar[5].n,
			}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line pkg/c90/grammar.y:564
		{
			yyVAL.n = &ASTDoWhileLoop{
				condition: yyDollar[5].n,
				body:      yyDollar[2].n,
			}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line pkg/c90/grammar.y:570
		{
			yyVAL.n = &ASTForLoop{
				initialiser:       yyDollar[3].n,
				condition:         yyDollar[4].n,
				postIterationExpr: nil,
				body:              yyDollar[6].n,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line pkg/c90/grammar.y:578
		{
			yyVAL.n = &ASTForLoop{
				initialiser:       yyDollar[3].n,
				condition:         yyDollar[4].n,
				postIterationExpr: yyDollar[5].n,
				body:              yyDollar[7].n,
			}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:589
		{
			yyVAL.n = &ASTGoto{
				label: &ASTIdentifier{ident: yyDollar[2].str},
			}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:594
		{
			yyVAL.n = &ASTContinue{}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:597
		{
			yyVAL.n = &ASTBreak{}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:600
		{
			yyVAL.n = &ASTReturn{}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:601
		{
			yyVAL.n = &ASTReturn{returnVal: yyDollar[2].n}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:605
		{
			AST = ASTTranslationUnit{
				&ASTNode{inner: yyDollar[1].n},
			}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:610
		{
			AST = append(AST, &ASTNode{inner: yyDollar[2].n})
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/c90/grammar.y:616
		{
			yyVAL.n = yyDollar[1].n
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/c90/grammar.y:621
		{
			panic("Old K&R style function parsed (1)")
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:622
		{
			yyVAL.n = &ASTFunction{typ: yyDollar[1].typ, decl: yyDollar[2].n.(*ASTDirectDeclarator), body: yyDollar[3].n}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/c90/grammar.y:623
		{
			panic("Old K&R style function parsed (2)")
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/c90/grammar.y:624
		{
			yyVAL.n = &ASTFunction{typ: &ASTType{typ: "int"}, decl: yyDollar[1].n.(*ASTDirectDeclarator), body: yyDollar[2].n}
		}
	}
	goto yystack /* stack new state and value */
}
